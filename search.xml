<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[github图表加到网页角落]]></title>
    <url>%2F2019%2F04%2F29%2F%E7%BD%91%E9%A1%B5%E5%8F%B3%E4%B8%8A%E8%A7%92%E6%98%BE%E7%A4%BAgithub%2F</url>
    <content type="text"><![CDATA[1 去这里或这里找喜欢的样式 找一个合适并喜欢的样式，复制方框的代码 前面的ribbons容易位置错误 2 打开主题目录下的_layout.swig文件文件 \themes\next\layout 打开后，在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下面（大概23行） 粘贴刚才复制的代码，改成你自己的github名字就可以了。 另外，这里可以延伸。放自己可以链接的外地址，并加上图片，道理一样。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生信技能树R作业答案-中]]></title>
    <url>%2F2019%2F04%2F29%2F%E7%94%9F%E4%BF%A1%E6%8A%80%E8%83%BD%E6%A0%91R%E4%BD%9C%E4%B8%9A%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[#作业在这里 123456789101112131415161718192021222324252627282930rm(list = ls()) options()$repos options()$BioC_mirroroptions(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))options()$repos options()$BioC_mirror# https://bioconductor.org/packages/release/bioc/html/GEOquery.htmlif (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;)BiocManager::install(&quot;KEGG.db&quot;,ask = F,update = F)BiocManager::install(c(&quot;GSEABase&quot;,&quot;GSVA&quot;,&quot;clusterProfiler&quot; ),ask = F,update = F)BiocManager::install(c(&quot;GEOquery&quot;,&quot;limma&quot;,&quot;impute&quot; ),ask = F,update = F)BiocManager::install(c(&quot;genefu&quot;,&quot;org.Hs.eg.db&quot;,&quot;hgu133plus2.db&quot; ),ask = F,update = F)options()$reposinstall.packages(&apos;WGCNA&apos;)install.packages(c(&quot;FactoMineR&quot;, &quot;factoextra&quot;))install.packages(c(&quot;ggplot2&quot;, &quot;pheatmap&quot;,&quot;ggpubr&quot;))library(&quot;FactoMineR&quot;)library(&quot;factoextra&quot;)library(GSEABase)library(GSVA)library(clusterProfiler)library(genefu)library(ggplot2)library(ggpubr)library(hgu133plus2.db)library(limma)library(org.Hs.eg.db)library(pheatmap) Task1: 通过R注释包从ensemble到symbol 请根据R包org.Hs.eg.db找到下面ensembl 基因ID 对应的基因名(symbol) 123456# ENSG00000000003.13# ENSG00000000005.5# ENSG00000000419.11# ENSG00000000457.12# ENSG00000000460.15# ENSG00000000938.11 1234567891011library(org.Hs.eg.db)ls(&quot;package:org.Hs.eg.db&quot;)g2s &lt;- toTable(org.Hs.egSYMBOL)g2e &lt;- toTable(org.Hs.egENSEMBL)head(g2s)head(g2e)g2se &lt;- merge(g2s, g2e, by=&apos;gene_id&apos;)head(g2se)ensID1 &lt;- c(&quot;ENSG00000000003.13&quot;,&quot;ENSG00000000005.5&quot;,&quot;ENSG00000000419.11&quot;, &quot;ENSG00000000457.12&quot;,&quot;ENSG00000000460.15&quot;,&quot;ENSG00000000938.11&quot;)ensID &lt;- data.frame(ensID1) Method1:for循环 12345678for (i in 1:nrow(ensID)) &#123; ens_i &lt;- strsplit(as.character(ensID[i,1]),&apos;.&apos;,fixed = TRUE)[[1]][1] ensID[i,2]&lt;-ens_i&#125;ensID$ensembl_id &lt;- NULLcolnames(ensID)[1] &lt;- &apos;ensembl_id&apos; ensID_last &lt;- merge(ensID, g2se, &apos;ensembl_id&apos;)ensID_last Method2:apply函数 123ensID$ensembl_id &lt;- unlist(lapply(ensID1, function(x) &#123;strsplit(as.character(x),&apos;.&apos;,fixed = TRUE)[[1]][1] &#125;))ensID_last2 &lt;- merge(ensID, g2se,&quot;ensembl_id&quot;) Task2:由探针找到对应的基因名 根据R包hgu133a.db找到下面探针对应的基因名(symbol) 053_at 117_at 121_at 1255_g_at 1316_at 1320_at 1405_i_at 1431_at 1438_at 1487_at 1494_f_at 1598_g_at 160020_at 1729_at 177_at 1234567library(hgu133a.db)ids &lt;- toTable(hgu133aSYMBOL)head(ids)myids &lt;- read.table(file = &quot;my_probe_ids.txt&quot;)colnames(myids) &lt;- &quot;probe_id&quot;myid_sym &lt;- merge(myids, ids, by=&quot;probe_id&quot;)head(myid_sym) Task3 找某个基因在表达矩阵中的值并分组绘图 1234567# 找到R包CLL内置的数据集的表达矩阵里面的TP53基因的表达量，并且绘制在 progres.-stable分组的boxplot图# 提示：# suppressPackageStartupMessages(library(CLL))# data(sCLLex)# sCLLex# exprSet=exprs(sCLLex) # library(hgu95av2.db) 以下是代码部分 123456789rm(list=ls())library(CLL)data(sCLLex)expr &lt;- exprs(sCLLex)pdata &lt;- pData(sCLLex)head(expr)library(hgu95av2.db)probe_sym &lt;- toTable(hgu95av2SYMBOL)tp53_probes &lt;- probe_sym[grep(&quot;TP53$&quot;, probe_sym$symbol),] 1234# probe_id symbol# 966 1939_at TP53# 997 1974_s_at TP53# 1420 31618_at TP53 1boxplot(expr[&apos;1939_at&apos;,]~pdata$Disease) ggpubr http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/ 1234567891011121314library(ggpubr)tp53_pub &lt;- cbind(expr[&apos;1939_at&apos;,], as.data.frame(pdata$Disease))colnames(tp53_pub) &lt;- c(&apos;Expression&apos;,&quot;Group&quot;)p &lt;- ggboxplot(tp53_pub, y=&apos;Expression&apos;, x=&apos;Group&apos;,fill = &apos;Group&apos;, palette = &apos;aaas&apos; ,add = &apos;jitter&apos;)# &quot;npg&quot;, &quot;aaas&quot;, &quot;lancet&quot;, &quot;jco&quot;, &quot;ucscgb&quot;, &quot;uchicago&quot;, &quot;simpsons&quot; &quot;rickandmorty&quot;p + stat_compare_means()p + stat_compare_means(method = &apos;t.test&apos;)#the violin plotmy_comparisons &lt;- list(c(&quot;progress.&quot;, &quot;stable&quot;))ggviolin(tp53_pub, y=&apos;Expression&apos;, x=&apos;Group&apos;,fill = &apos;Group&apos;, palette = &apos;aaas&apos; ,add = &apos;boxplot&apos;, add.params = list(fill = &apos;white&apos;))+ stat_compare_means(comparisons = my_comparisons, method = &quot;t.test&quot;)+ stat_compare_means(label.y = 5) Task4:对任意肿瘤的任意基因进行分类做图（用cBioPortal） cbioportal下载，即利用在线数据（下载），本地进行改观 http://www.cbioportal.org/index.do Select Studies 选项中输入Breast Invasive Carcinoma PanCancer 搜索并选中目标数据集 Enter Genes 数据框中输入目标基因BRCA1 点击Submit Query提交搜索请求 结果页面中，Plots选项卡选择合适数据进行绘图，或下载数据 12345678910rm(list = ls())options(stringsAsFactors = F)a=read.table(&apos;e4-plot.txt&apos;,sep = &apos;\t&apos;,fill = T,header = T)View(a)colnames(a)=c(&apos;id&apos;,&apos;subtype&apos;,&apos;expression&apos;,&apos;mut&apos;)dat=alibrary(ggstatsplot)ggbetweenstats(data =dat, x = subtype, y = expression)library(ggplot2)ggsave(&apos;plot-again-BRCA1-TCGA-BRCA-cbioportal.png&apos;) Task5:某基因在某肿瘤中的生存曲线作图美化 找到TP53基因在TCGA数据库的乳腺癌数据集的表达量分组看其是否影响生存 提示使用：http://www.oncolnc.org/ 值得商榷的问题，low和high分组问题，若50：50分组，无差异 个人理解，这里不必平分，可以30：30，也就是就挑高和低的30%，这是可以说明问题的 123456789101112131415rm(list = ls())options(stringsAsFactors = F)a=read.table(&apos;BRCA_7157_50_50.csv&apos;,sep = &apos;,&apos;,fill = T,header = T)#View(a)dat=alibrary(ggplot2)library(survival)library(survminer) table(dat$Status)dat$Status=ifelse(dat$Status==&apos;Dead&apos;,1,0)sfit &lt;- survfit(Surv(Days, Status)~Group, data=dat)sfitsummary(sfit)ggsurvplot(sfit, conf.int=F, pval=TRUE)ggsave(&apos;survival_TP53_in_BRCA_TCGA.png&apos;) Task6：GEO下载表达数据并提取特定的基因做热图（要去重复） 下载数据集GSE17215的表达矩阵并且提取下面的基因画热图 ACTR3B ANLN BAG1 BCL2 BIRC5 BLVRA CCNB1 CCNE1 CDC20 CDC6 CDCA1 CDH3 CENPF CEP55 CXXC5 EGFR ERBB2 ESR1 EXO1 FGFR4 FOXA1 FOXC1 GPR160 GRB7 KIF2C KNTC2 KRT14 KRT17 KRT5 MAPT MDM2 MELK MIA MKI67 MLPH MMP11 MYBL2 MYC NAT1 ORC6L PGR PHGDH PTTG1 RRM2 SFRP1 SLC39A6 TMEM45B TYMS UBE2C UBE2T GSE17215数据在https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE17215 可知，是U133A的芯片数据,共6个样本 title为Expression data from paclitaxel and salinomycin-treated HMLER breast cancer cells 1library(hgu133a.db) 有三种方法得到表达数据 1.下载.CEL格式文件，自己进行处理 2.手动下载series Matrix Files，然后读入 3.利用R下载表达数据 1234567891011121314151617181920212223242526272829303132333435363738394041424344library(GEOquery)library(GEOquery)#GEO使用https://www.bioconductor.org/packages/release/bioc/vignettes/GEOquery/inst/doc/GEOquery.htmlgse17215 &lt;- getGEO(&apos;GSE17215&apos;, AnnotGPL = F, ## 注释文件 getGPL = F) ## 平台文件show(gse17215)dat &lt;- exprs(gse17215[[1]])pdata_17215 &lt;- pData(gse17215[[1]])pdata_17215$`agent:ch1`#提取hgu133a包中的probe_id和symbolids &lt;- toTable(hgu133aSYMBOL)dat &lt;- dat[ids$probe_id,]#合并，也可以用merge#这里有个问题，一共50个基因名，但是得到的是87个探针，也就是有一个gene对应几个探针的情况#怎么处理？ 取median或者去p最小的,也有取均值的,#先把median加到ids最后一列ids$median &lt;- apply(dat, 1, median)head(ids)ids &lt;- ids[order(ids$symbol, ids$median, decreasing = T),]head(ids)ids_dup &lt;- ids[!duplicated(ids$symbol),]head(ids_dup)dat &lt;- dat[ids_dup$probe_id,]dim(dat)#这样就得到了去重重复的探针在6个样本中的表达信息，但没有基因名dat &lt;- as.data.frame(dat)dat$probe_id &lt;- rownames(dat)dat_symbol &lt;- merge(dat, ids, by =&quot;probe_id&quot;)#载入50个基因名genes &lt;- &apos;ACTR3B ANLN BAG1 BCL2 BIRC5 BLVRA CCNB1 CCNE1 CDC20 CDC6 CDCA1 CDH3 CENPF CEP55 CXXC5 EGFR ERBB2 ESR1 EXO1 FGFR4 FOXA1 FOXC1 GPR160 GRB7 KIF2C KNTC2 KRT14 KRT17 KRT5 MAPT MDM2 MELK MIA MKI67 MLPH MMP11 MYBL2 MYC NAT1 ORC6L PGR PHGDH PTTG1 RRM2 SFRP1 SLC39A6 TMEM45B TYMS UBE2C UBE2T&apos;genes &lt;- strsplit(genes, &apos; &apos;)[[1]]genes &lt;- data.frame(genes)colnames(genes) &lt;- &apos;symbol&apos;genes_expr &lt;- merge(genes, dat_symbol, by =&apos;symbol&apos;)#至此完成了探针过滤，加基因名等操作#取对数genes_expr &lt;- log2(dat+1)heat_expr &lt;- genes_expr[,-c(2,9)]rownames(heat_expr) &lt;- heat_expr$symbol heat_expr &lt;- heat_expr[,-1]heat_expr &lt;- log2(heat_expr+1)pheatmap::pheatmap(heat_expr, scale = &apos;row&apos;)ggcorrplot::ggcorrplot(cor(heat_expr)) Task7:GEO下载表达矩阵做样本的相关性热图，需要标记样本分组信息 作业7 下载数据集GSE24673的表达矩阵计算样本的相关性并且绘制热图，需要标记上样本分组信息 数据地址https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE24673 12345678910111213rm(list=ls())options(stringsAsFactors = F) gse24673 &lt;- getGEO(&apos;GSE24673&apos;, AnnotGPL = F, ## 注释文件 getGPL = F) ## 平台文件show(gse24673)dat &lt;- exprs(gse24673[[1]])pdata_24673 &lt;- pData(gse24673[[1]]) pdata_24673 &lt;- pdata_24673$source_name_ch1pdata_24673 &lt;- data.frame(Group = pdata_24673)#添加分组信息rownames(pdata_24673) &lt;- colnames(cor_dat)pheatmap::pheatmap(cor_dat, annotation_col=pdata_24673) Task8： 找到芯片对应平台的注释包并进行安装 找到 GPL6244 platform of Affymetrix Human Gene 1.0 ST Array 对应的R的bioconductor注释包，并且安装它！ 参考http://www.bio-info-trainee.com/1399.html 1234567options()$reposoptions()$BioC_mirror options(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))BiocManager::install(&quot;hugene10sttranscriptcluster.db&quot;,ask = F,update = F)options()$reposoptions()$BioC_mirror Task9：GEO下载表达矩阵，所有样本中挑选所需要的探针 下载数据集GSE42872的表达矩阵，并且分别挑选出所有样本的(平均表达量/sd/mad/)最大的探针， 并且找到它们对应的基因。 1234567891011121314151617181920212223242526rm(list=ls())options(stringsAsFactors = F) gse42872 &lt;- getGEO(&apos;GSE42872&apos;, AnnotGPL = F, ## 注释文件 getGPL = F) ## 平台文件show(gse42872)dat &lt;- as.data.frame(exprs(gse42872[[1]]))pdata_42872 &lt;- pData(gse42872[[1]]) pdata_42872 &lt;- pdata_42872$source_name_ch1pdata_42872 &lt;- data.frame(Group = pdata_42872)max_mean &lt;- names(sort(apply(dat,1, mean), decreasing = T))[1]max_sd &lt;- names(sort(apply(dat,1, sd), decreasing = T))[1]max_mad &lt;- names(sort(apply(dat,1, mad), decreasing = T))[1]str(max_max)library(hugene10sttranscriptcluster.db)list(hugene10sttranscriptcluster.db)###find the corresponding genes for the probesids &lt;- toTable(hugene10sttranscriptclusterSYMBOL)ids[match(max_mad, ids$probe_id),]#或者select(hugene10sttranscriptcluster.db, keys = c(max_sd, max_mad, max_mean), columns = c(&quot;SYMBOL&quot;), keytype = &quot;PROBEID&quot;)##注意，max_mad探针对应着很多基因名 10 Task10 这部分内容参考http://www.bio-info-trainee.com/bioconductor_China/software/limma.html 下载数据集GSE42872的表达矩阵，并且根据分组使用limma做差异分析， 得到差异结果矩阵 12345678910111213141516171819202122232425262728293031323334library(GEOquery)rm(list=ls())options(stringsAsFactors = F) gse42872 &lt;- getGEO(&apos;GSE42872&apos;, GSEMatrix = TRUE, AnnotGPL = F, ## 注释文件 getGPL = F) ## 平台文件show(gse42872)dat &lt;- as.data.frame(exprs(gse42872[[1]]))pdata_42872 &lt;- pData(gse42872[[1]]) pdata_42872 &lt;- pdata_42872$titlegroup &lt;- unlist(lapply(pdata_42872, function(x)&#123; strsplit(x,&apos; &apos;)[[1]][4]&#125; ))#pdata_42872 &lt;- data.frame(Group = pdata_42872)library(hugene10sttranscriptcluster.db)ids &lt;- toTable(hugene10sttranscriptclusterSYMBOL)dim(ids)dim(dat)# &gt; dim(ids)# [1] 19827 2# &gt; dim(dat)# [1] 33297 6#很多探针没有注释信息，进行过滤,/可以用merge但是需要加列dat_filter &lt;- dat[match(ids$probe_id,rownames(dat)),]dim(dat_filter)#用%in%进行筛选dat_filter2 &lt;- dat[rownames(dat) %in% ids$probe_id,]# &gt; dim(dat_filter)# [1] 19827 6#dat_filter is the expression matrix 差异表达分析 需要分组矩阵（design），比较矩阵（contrast） 123456789101112131415161718192021library(limma)##########分组矩阵design，group中的说明。1代表是。用于每张芯片的RNA样本分类design &lt;- model.matrix(~0+factor(group))colnames(design) &lt;- levels(factor(group))rownames(design) &lt;- colnames(dat_filter)design# Control Vemurafenib# GSM1052615 1 0# GSM1052616 1 0# GSM1052617 1 0# GSM1052618 0 1# GSM1052619 0 1# GSM1052620 0 1###############比较矩阵colnames(design) &lt;- levels(factor(group))rownames(design) &lt;- colnames(dat_filter)design#再做一个比较矩阵【一般是case比control】，规定实验组和对照组并定义谁比谁contrast.matrix&lt;-makeContrasts(paste0(unique(group),collapse = &quot;-&quot;),levels = design)#或者下面。注意是Vemurafenib/Controlcontrast.matrix_2 &lt;- makeContrasts(&quot;Vemurafenib-Control&quot; ,levels = design) 筛选差异基因DEGs ###分步进行1，这步用到实验设计矩阵 1fit &lt;- lmFit(dat_filer, design) ###分步进行2，用到比较矩阵 12fit2 &lt;- contrasts.fit(fit, contrast.matrix)fit2 &lt;- eBayes(fit2) ###分步进行3 12tem_output &lt;- topTable(fit2, coef = 1, n= Inf)mydegs &lt;- na.omit(tem_output) ###写成函数 12345678910111213deg&lt;- function(dat_filter,design,contrast)&#123; ##step1 fit &lt;- lmFit(dat_filter,design)#用到实验设计矩阵 ##step2 fit2 &lt;- contrasts.fit(fit, contrast) #用到比较矩阵 fit2 &lt;- eBayes(fit2) ##step3 mtx = topTable(fit2, coef=1, n=Inf) deg_mtx = na.omit(mtx) return(deg_mtx)&#125;deg_mtx &lt;- DEG(dat_filter,design,contrast) #得到全部的差异基因矩阵head(DEG_mtx) 下面和symbole对应 12345library(hugene10sttranscriptcluster.db)ids &lt;- toTable(hugene10sttranscriptclusterSYMBOL)deg_mtx$probe_id &lt;- rownames(deg_mtx)deg_mtx &lt;- merge(ids,deg_mtx, by = &apos;probe_id&apos;)write.csv(deg_mtx, &apos;GSE42872_DEGs_limma.csv&apos;, quote = F)]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>统计</tag>
        <tag>生物信息学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[同一个github账户绑定两个域名]]></title>
    <url>%2F2019%2F04%2F29%2F%E5%90%8C%E4%B8%80%E4%B8%AAgithub%E8%B4%A6%E6%88%B7%E7%BB%91%E5%AE%9A%E4%B8%A4%E4%B8%AA%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[一个github账号可以建立很多仓库，但是只能有一个个人主页仓库，其余都是项目仓库。主页仓库就是你的名字.github.io这个，其余的就是https://github.com/hyinli/项目名称这种。 前面已经建立个人主页仓库并绑定域名，现在再利用项目仓库网页并绑定个人域名。具体如下 1 先建立个人项目仓库比如名字kk 2 建gh-pages分支（不能用master） 3 域名解析 其中，IP这样获得 ping 你的名字.github.io 4 根目录的source文件夹见CNAME文件 首行写入你要绑定的域名，可以带www 说明：网上建议裸域名。但是是可以带www的，只是项目仓库必须建在gh-pages分支，master分支会一直提示错误。 5 根目录的’config.yml文件，修改 6 github 项目仓库，setting 填入你的域名，带www —The end—]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>个人域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R检验数据是否符合正态分布]]></title>
    <url>%2F2019%2F04%2F29%2FR%E6%A3%80%E9%AA%8C%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%2F</url>
    <content type="text"><![CDATA[正态分布又叫高斯分布，很多统计学的理论都是假设所用的数据符合正态分布。所以在研究数据时，首先要看数据是否符合正态分布。 首先，R中很多安装包中有自带的数据集，所以在使用某个数据前先看它是在哪个包中。具体可以参考R各个包里面的数据集列表. 这次主要用MASS包中的crabs数据 1 直方图检验crabs对象是否正态分布 1234library(lattice)library(MASS)histogram(crabs$CW)histogram(~CW|sex, data = crabs,col=&apos;lightblue&apos;) 解释： |是统计学符号，表示“基于…的条件”，这里按螃蟹的性别进行区分处理。 2这条 QQ图进行检测 qqnorm()可以绘制QQ图。通过绘制的图是否呈现一直线判断是否符合正态分布。另外还有一个qqline()函数，在QQ图中绘制一条直线，QQ图中的点越接近这条直线，表示数据越接近正态分布。 12qqnorm(crabs$CW, main =&quot;QQ for Crabs&quot;)qqline(crabs$CW) 3 shapiro.test()函数 上述判断方法相对比较主观，shapiro.test()相对比较客观。只需将检验的数据当作shapiro。test()的函数即可。 12nortest1&lt;-shapiro.test(crabs$CW)nortest1 显示为 123456&gt; nortest1 Shapiro-Wilk normality testdata: crabs$CWW = 0.99106, p-value = 0.2542 p-value反应服从正态分布的概率，值越小越小的概率符合，通常0.05做标准，大于0.05则表示符合正态分布（此处为0.2542），故符合正态分布 接下来分别检验公螃蟹和母螃蟹是否符合正态分布 123456789101112131415161718nortest2 &lt;- with(crabs, tapply(CW, sex,shapiro.test))nortest2#结果如下&gt; nortest2$F Shapiro-Wilk normality testdata: X[[i]]W = 0.98823, p-value = 0.5256$M Shapiro-Wilk normality testdata: X[[i]]W = 0.98327, p-value = 0.2368 可见都符合正态分布。]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>统计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github两个账户不能进行push的解决办法]]></title>
    <url>%2F2019%2F04%2F29%2Fgithub%E4%B8%A4%E4%B8%AA%E8%B4%A6%E6%88%B7%E4%B8%8D%E8%83%BD%E8%BF%9B%E8%A1%8Cpush%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[因为邮箱和本地电脑问题，我重新申请了github账号，但使用新账户申请博客的时候push出现问题，无法进行推送。windows系统解决办法如下 搜索“凭据管理器”，进入windows凭据，普通凭据， 然后把三个与github相关的删除即可。]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo+个人域名建立个人网站]]></title>
    <url>%2F2019%2F04%2F29%2Fgithub%2Bhexo%2B%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[写在前面： 之前一直用hugo结合github使用，这次尝试hexo，发现非常喜欢，可塑性很强。 主要记录一些坑 这个博文主要是大体记录流程，至于中间参考过的3篇建站文章会列出来。总之根据这篇博文你可以完全搭建属于自己的个性网站。 1 github的工作 1 注册github，不再描述 2 建立repo 记得repo名字要和github id一样。也就是如果你的id是hello,那么要申请一个hello.github.io的repo。 2 本地电脑的工作 请参考https://www.jianshu.com/p/189fd945f38f 大体分为以下几步 1下载安装Git 2下载安装node.js 3安装hexo并进行初始化 选择某个盘，创建hexo文件夹，别的名字也行 12npm install -g hexohexo init 4修改config.yml文件，关键是theme 稍许，hexo文件夹里会出现很多内容。用notepad++打开_config.yml文件，修改 title（博客名字） subtite(副标题） author（作者名字） 关键是theme ，系统默认是landscape，也可以查看更多主题。个人比较喜欢next主题，另外， black-blue, BlueLake, pure主题也不错。每个主题都会告诉你下载方式，直接参照进行就行，手动下载或git clone下载。 其余部分可以暂时不动。（现在也可以更改，看2.7.1）下载后的主题会存放在hexo下的themes文件夹里。 这个地方是hugo是不一样的处理方式，hugo要吧主题的example文件下的内容进行copy替换。而hexo是同时处理根目录和主题目录。 5生成网站并在线查看 现在就可以在本地电脑查看雏形了. 12hexo ghexo s 若要查看更多hexo命令，请移步查看更多hexo命令 hexo s后，会提示端口，复制就可以本地访问，都是localhost：4000 6 写第一篇文章 刚才说了hexo是根目录和主题下目录多要修改一些内容。所以，往下会加上根目录（代表\hexo），主题目录代表（\hexo\themes\next）。 写文章是在根目录：\hexo\source_posts。如果你在简书有文章，可以直接复制，可以完美识别。记得如果用toc功能，需要#后又空格，否则不被识别。 写完后，再次hexo s既可以看到更新。 7 部署到github 1 更改根目录_config.yml，最好需要有以下内容 1234deploy: type: git repository: https://github.com/你的名字/你的名字.github.io.git branch: master 2 安装hexo-deployer-git自动部署发布工具 1npm install hexo-deployer-git --save 3 发布到github 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 如果初次使用需要输入用户名密码之类，牢记，这样你的github repo就会有你刚才push的内容 4 在线访问 https://你的名字.github.io/ 我的是https://hyinli.github.io/可以查看 3主题配置 这部分花费时间比较多，所以单列出来。 现在雏形已经具备，接下来要进行主题配置，添加一些比较有用的插件等。hexo有很多插件 各种各样的配置，一定有你喜欢的。 这部分主要参考这两篇文章,非常详尽，如果还有你想不到的内容，那就单项google搜索。 Windows下使用hexo搭建博客 Hexo+NexT搭建博客拥抱舒爽 主要包括有 语言，类别，标签，菜单，头像，统计在线时间，访问量，等。这些不再赘述。 1 开启文章目录 请参考Hexo博客NexT主题开启文章目录和调整样式 nextT本身有目录的，我们需要开启它 1 修改custom.styl themes/next/source/css/_custom notpad++打开，添加以下内容 打开及调整目录字体 1234567#文章目录默认展开//文章目录默认展开.post-toc .nav .nav-child &#123; display: block; &#125;#目录字体大小调整.post-toc ol &#123; font-size : 13px; &#125; 修改主题配置文件themes/next/_config.yml 目录换行 123toc: enable: true wrap: true #文章目录无法锚定的问题 假如出现，文章目录生成，但是就不能链接到正确的地方。如果自己的操作没错误，那就执行 123hexo clean命令#然后hexo d -g 4 被百度和google搜索引擎能搜索到，参考上述两篇文章 5 绑定个人域名 1 购买个人域名 我是阿里云买的 2 域名解析 设置如下 3 Hexo设置 \hexo\source下创建CNAME文件（没有后缀，且全部大写），notepad++打开，首行写上你购买的域名 我的就是 http://www.ucco.net 网上有人建议必要加www 但是这样设置后 看起来非常不好看，我又加上了 4 github设置 再回到github，打开你的名字.github.io中的setteings，修正以下内容 custom domain中，]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo github，域名，个人网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggstatsplot包的安装和简单使用]]></title>
    <url>%2F2019%2F04%2F29%2Fggstatsplot%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[ggstatsplot是很优秀的统计作图包,需要3.5及以上R 安装如下 12345devtools::install_github( repo = &quot;IndrajeetPatil/ggstatsplot&quot;, # package path on GitHub dependencies = TRUE, # installs packages which ggstatsplot depends on upgrade_dependencies = TRUE # updates any out of date dependencies) 用某个基因在乳腺癌中突变类型和mRNA表达关系做了一个图，比较漂亮 1234567getwd()a = read.table(&apos;plot.txt&apos;,header = TRUE, sep = &apos;\t&apos;, fill=T)tail(a)colnames(a)=c(&apos;ID&apos;,&apos;Alternations&apos;,&apos;mRNA_expression&apos;,&apos;Mutations&apos;)dat = alibrary(ggstatsplot)ggbetweenstats(data=dat, x=Alternations, y=mRNA_expression)]]></content>
      <categories>
        <category>r</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>绘图</tag>
        <tag>SCI绘图</tag>
      </tags>
  </entry>
</search>
